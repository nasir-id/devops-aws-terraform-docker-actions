name: Build and Push Docker Image

on:
  push:
    branches: [ '**' ]
    paths:
      - 'app/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'app/**'
  # Enable manual trigger from GitHub Actions tab
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Set up Docker Buildx
        run: |
          # Install dependencies if needed
          sudo apt-get update
          sudo apt-get install -y curl

          # Create Docker config directory if it doesn't exist
          mkdir -p ~/.docker/cli-plugins/

          # Download Docker Buildx binary
          curl -L "https://github.com/docker/buildx/releases/download/v0.10.4/buildx-v0.10.4.linux-amd64" -o ~/.docker/cli-plugins/docker-buildx
    
          # Make it executable
          chmod +x ~/.docker/cli-plugins/docker-buildx
    
          # Create and use a new builder instance
          docker buildx create --name mybuilder --use
    
          # Inspect to verify it's working
          docker buildx inspect --bootstrap
      
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin      
      
      - name: Extract metadata for Docker
        id: meta
        run: |
          # Set environment variables for later use
          echo "IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}/clock-app" >> $GITHUB_ENV
          
          # Create the latest tag
          echo "DOCKER_LATEST_TAG=${{ secrets.DOCKERHUB_USERNAME }}/clock-app:latest" >> $GITHUB_ENV
          
          # Create the SHA tag (short commit SHA)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "DOCKER_SHA_TAG=${{ secrets.DOCKERHUB_USERNAME }}/clock-app:$SHORT_SHA" >> $GITHUB_ENV
          
          # Create a combined tags string for use with docker build
          echo "TAGS=${{ secrets.DOCKERHUB_USERNAME }}/clock-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/clock-app:$SHORT_SHA" >> $GITHUB_ENV
          
          # Set outputs similar to the original action
          echo "tags=${{ secrets.DOCKERHUB_USERNAME }}/clock-app:latest,${{ secrets.DOCKERHUB_USERNAME }}/clock-app:$SHORT_SHA" >> $GITHUB_OUTPUT
      
      # - name: Build and push
      #   uses: docker/build-push-action@v4
      #   with:
      #     context: ./app
      #     file: ./app/Dockerfile
      #     push: true
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max

      - name: Build and push
        run: |
          # Set up BuildKit for better performance (similar to the GitHub action)
          export DOCKER_BUILDKIT=1
          
          # Extract the tags from previous step
          IFS=',' read -ra TAG_ARRAY <<< "${{ steps.meta.outputs.tags }}"
          
          # Build the base command
          BUILD_CMD="docker build ./app -f ./app/Dockerfile"
          
          # Add all tags
          for tag in "${TAG_ARRAY[@]}"; do
            BUILD_CMD="$BUILD_CMD -t $tag"
          done
          
          # Add any labels that might be present
          if [ -n "${{ steps.meta.outputs.labels }}" ]; then
            IFS=',' read -ra LABEL_ARRAY <<< "${{ steps.meta.outputs.labels }}"
            for label in "${LABEL_ARRAY[@]}"; do
              BUILD_CMD="$BUILD_CMD --label $label"
            done
          fi
          
          # Note: GitHub Actions cache can't be directly replicated with standard Docker commands
          # You might want to consider Docker's native buildx cache or a registry cache instead
          
          # Execute the build
          echo "Executing: $BUILD_CMD"
          eval $BUILD_CMD
          
          # Push all tags to Docker Hub
          for tag in "${TAG_ARRAY[@]}"; do
            echo "Pushing: $tag"
            docker push $tag
          done